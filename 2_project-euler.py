"""
Even Fibonacci numbers
===================================================================================
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

# All test cases
testCases = [
    (0, 4613732)
]

# The solution class, which defines the algorithm and helper functions
class Solution:
    # Helper function
    def helper(self) -> list:
        MAX_FIB = 4000000
        fib_list = [1, 2]

        while (fib_list[-2] + fib_list[-1] < MAX_FIB):
            fib_list.append(fib_list[-2] + fib_list[-1])

        return fib_list

    # Main algorithm
    def algorithm(self, val : int) -> int:
        # Generate list of fibonacci numbers up to 4 million
        fib_list = self.helper()

        # Sum even fibonacci numbers
        return sum([x for x in fib_list if x % 2 == 0])

# Test the algorithm
def testIt() -> int:
    # Define the solution object for testing
    sol = Solution()
    
    # Iterate through all input and expected output test pairs
    for i, v in testCases:
        ans = sol.algorithm(i)
        # Run each test case
        if ans != v:
            print("*** Test failed! ***\nExpected: %s\nActual: %s" %(v,ans))

    return 0

# Main, for easily running the algorithm/tests
if __name__ == "__main__":
    testIt()